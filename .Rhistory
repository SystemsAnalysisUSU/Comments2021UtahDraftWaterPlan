#Calculate the Mid rank as Cumulative + 1/2 current counts
dfLabels$MidRank <- dfLabels$Rank + dfLabels$Counts/2
dfLabels$YPos <- 1250
dfAllYearsSort$Blank <- ""
#Build a data frame to label the lines
dfLineLabels <- data.frame(Rank = dfLabels$Rank[1:2],
GPCD = cGPCDBreaks[2:3],
#Label = c("Salt Lake City ~ 191 gpcd", "2x Salt Lake City ~ 382 gpcd"))
Label = c(paste(sAvgText, "~ ", nAvgGPCD, "gpcd"), paste("120%", sAvgText, "~", sprintf("%.0f", nGPCDToMeetTarget), "gpcd")))
sBlockLabelColor <- "red"
sBlockSepColor <- "black"
sHighlightColor <- "red"
#Flip the Short Names upside down to plot labels correctly
dfAllYearsSortFlip <- dfAllYearsSort %>% map_df(rev)
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_bar(aes(x= reorder(WRENAME, -TotalGPCD), y=TotalGPCD, fill = TotGPCDBin, color = TotGPCDBin), stat="identity") +
#Plot vertical line to separate blocks
geom_vline(xintercept = dfCounts$CumSum, color=sBlockSepColor, size = 1, linetype = "dashed") +
#Label the number of providers in each block
geom_text(data = dfLabels, aes(x = MidRank, y = YPos, label = TextFull, color = FontColor), size = 7) +
#Label the line breaks
geom_text(data = dfLineLabels, aes(x = Rank - 5, y = 2000, label = Label), size = 6, angle = 90, color = sBlockSepColor) +
#Plot some points to see where they are
#geom_point(data = data.frame(x = c(0,1000), y = c(0,1000)), aes(x=x,y=y), size= 10) +
#geom_text(data=dfAvgGPCD %>% filter(year==2015), aes(x=AvgGPCD+30,y=25), label = "Utah average", size=6, hjust=0) +
#Define scales
#Flip the x labels upside down
scale_x_discrete(labels = dfAllYearsSortFlip$ShortName) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_fill_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_y_continuous(breaks = seq(0,4500, by=500)) +
#Turn the Fill guide off
guides(fill = "none", color = "none") +
labs(x="Utah water provider (Ranked)", y="Gallons per person per day") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color = sHighlightColor))
#Prepare a data frame to download to excel that shows:
View(dfAllYearsSort)
dfAllYearsSort <- dfAllYears %>% filter(year == 2018) %>% arrange(TotalGPCD)
dfAllYearsSort$Row <- seq(1,nrow(dfAllYearsSort), by=1)
#Cities to highlight
#These cities have a range of Total GPCD, Total GPCD is often similar to Potable GPCD, and people will recognize these providers
#Read in from Excel
dfHighlightCities <- read_excel("HighlightCities.xlsx","HighlightCities","A1:B23")
# The Salt Lake City gallons per person per day reported
nAvgGPCD <- 191 + 1  #240 = state average
sAvgText <- "Salt Lake City"
# Define the state conservation goal and calculate the equivalent GPCD that
# will reach the nAvgGPCD vaue
nStateConserveGoal <- 0.2
#Calculate the GPCD that will meet the SLC target
nGPCDToMeetTarget <-  -nAvgGPCD/(nStateConserveGoal - 1)
print(paste(sprintf("%0.f",nGPCDToMeetTarget), "gpcd can reduce by state conservation goal of", sprintf("%.0f%%", nStateConserveGoal*100), "and achieve SLC use"))
# Break at 0, the average, the GPCD to reduce to meet the average, and max
cGPCDBreaks <-  c(0, nAvgGPCD, nGPCDToMeetTarget, max(dfAllYearsSort$TotalGPCD))
#Count water providers within breaks
dfCounts <- hist(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, plot=FALSE) #, breaks = c(0,100,200,300,400,500, 1000, 5000))
dfCounts$CumSum <- nrow(dfAllYearsSort) - cumsum(dfCounts$counts)
#Assign each water provider to a break
dfAllYearsSort$TotGPCDBin <- cut(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, labels = cGPCDBreaks[1:(length(cGPCDBreaks)-1)])
#Sum in each group
dfGPCDByVolume <- dfAllYearsSort %>% group_by(TotGPCDBin, year) %>% summarize(TotalUse = sum(TotalUse))
#Add an additional group that is the Water providers to highlight
dfAllYearsSort$TotGPCDBin <- ifelse(dfAllYearsSort$WRENAME %in% dfHighlightCities$FullName,"Highlight", dfAllYearsSort$TotGPCDBin)
#Joint the Short cities names
dfAllYearsSort <- left_join(dfAllYearsSort, dfHighlightCities, by = c("WRENAME" = "FullName"))
#Convert NAs to ""
dfAllYearsSort$ShortName <- ifelse(is.na(dfAllYearsSort$ShortName),"",dfAllYearsSort$ShortName)
#Add the volume data to the prior counts data
dfCounts$Volume <- dfGCPDByVolume$TotalUse
dfCounts$PercentVolume <- dfCounts$Volume/sum(dfCounts$Volume)
dfCounts$TextFull <- paste("These ",dfCounts$counts, "providers use\n", sprintf("%1.0f%%", dfCounts$PercentVolume*100), "of the statewide total")
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
dfCounts$TextFull <- paste(dfCounts$counts, "\nProviders\n", "(",sprintf("%1.0f%%", dfCounts$PercentVolume*100), "state volume)")
#Nullify the last text entry
dfCounts$TextFull <- dfCounts$TextFull[1:(length(dfCounts$TextFull)-1)]
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
#Build a data frame to plot labels for the groups
dfLabels <- data.frame(Rank = dfCounts$CumSum,
Text = dfCounts$Text,
TextFull = dfCounts$TextFull,
Counts = dfCounts$counts,
FontColor = as.factor(c(1,2,3)))
#Calculate the Mid rank as Cumulative + 1/2 current counts
dfLabels$MidRank <- dfLabels$Rank + dfLabels$Counts/2
dfLabels$YPos <- 1250
dfAllYearsSort$Blank <- ""
#Build a data frame to label the lines
dfLineLabels <- data.frame(Rank = dfLabels$Rank[1:2],
GPCD = cGPCDBreaks[2:3],
#Label = c("Salt Lake City ~ 191 gpcd", "2x Salt Lake City ~ 382 gpcd"))
Label = c(paste(sAvgText, "~ ", nAvgGPCD, "gpcd"), paste("120%", sAvgText, "~", sprintf("%.0f", nGPCDToMeetTarget), "gpcd")))
sBlockLabelColor <- "red"
sBlockSepColor <- "black"
sHighlightColor <- "red"
#Flip the Short Names upside down to plot labels correctly
dfAllYearsSortFlip <- dfAllYearsSort %>% map_df(rev)
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_bar(aes(x= reorder(WRENAME, -TotalGPCD), y=TotalGPCD, fill = TotGPCDBin, color = TotGPCDBin), stat="identity") +
#Plot vertical line to separate blocks
geom_vline(xintercept = dfCounts$CumSum, color=sBlockSepColor, size = 1, linetype = "dashed") +
#Label the number of providers in each block
geom_text(data = dfLabels, aes(x = MidRank, y = YPos, label = TextFull, color = FontColor), size = 7) +
#Label the line breaks
geom_text(data = dfLineLabels, aes(x = Rank - 5, y = 2000, label = Label), size = 6, angle = 90, color = sBlockSepColor) +
#Plot some points to see where they are
#geom_point(data = data.frame(x = c(0,1000), y = c(0,1000)), aes(x=x,y=y), size= 10) +
#geom_text(data=dfAvgGPCD %>% filter(year==2015), aes(x=AvgGPCD+30,y=25), label = "Utah average", size=6, hjust=0) +
#Define scales
#Flip the x labels upside down
scale_x_discrete(labels = dfAllYearsSortFlip$ShortName) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_fill_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_y_continuous(breaks = seq(0,4500, by=500)) +
#Turn the Fill guide off
guides(fill = "none", color = "none") +
labs(x="Utah water provider (Ranked)", y="Gallons per person per day") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color = sHighlightColor))
#Prepare a data frame to download to excel that shows:
#   1) Highlight city
#   2) Total GPCD
#   3) Potable GPCD
#
dfAllYearsSort <- dfAllYears %>% filter(year == 2018) %>% arrange(TotalGPCD)
dfAllYearsSort$Row <- seq(1,nrow(dfAllYearsSort), by=1)
#Cities to highlight
#These cities have a range of Total GPCD, Total GPCD is often similar to Potable GPCD, and people will recognize these providers
#Read in from Excel
dfHighlightCities <- read_excel("HighlightCities.xlsx","HighlightCities","A1:B23")
# The Salt Lake City gallons per person per day reported
nAvgGPCD <- 191 #240 = state average
sAvgText <- "Salt Lake City"
# Define the state conservation goal and calculate the equivalent GPCD that
# will reach the nAvgGPCD vaue
nStateConserveGoal <- 0.2
#Calculate the GPCD that will meet the SLC target
nGPCDToMeetTarget <-  -nAvgGPCD/(nStateConserveGoal - 1)
print(paste(sprintf("%0.f",nGPCDToMeetTarget), "gpcd can reduce by state conservation goal of", sprintf("%.0f%%", nStateConserveGoal*100), "and achieve SLC use"))
# Break at 0, the average, the GPCD to reduce to meet the average, and max
cGPCDBreaks <-  c(0, nAvgGPCD, nGPCDToMeetTarget, max(dfAllYearsSort$TotalGPCD))
#Count water providers within breaks
dfCounts <- hist(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, plot=FALSE) #, breaks = c(0,100,200,300,400,500, 1000, 5000))
dfCounts$CumSum <- nrow(dfAllYearsSort) - cumsum(dfCounts$counts)
#Assign each water provider to a break
dfAllYearsSort$TotGPCDBin <- cut(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, labels = cGPCDBreaks[1:(length(cGPCDBreaks)-1)])
#Sum in each group
dfGPCDByVolume <- dfAllYearsSort %>% group_by(TotGPCDBin, year) %>% summarize(TotalUse = sum(TotalUse))
#Add an additional group that is the Water providers to highlight
dfAllYearsSort$TotGPCDBin <- ifelse(dfAllYearsSort$WRENAME %in% dfHighlightCities$FullName,"Highlight", dfAllYearsSort$TotGPCDBin)
#Joint the Short cities names
dfAllYearsSort <- left_join(dfAllYearsSort, dfHighlightCities, by = c("WRENAME" = "FullName"))
#Convert NAs to ""
dfAllYearsSort$ShortName <- ifelse(is.na(dfAllYearsSort$ShortName),"",dfAllYearsSort$ShortName)
#Add the volume data to the prior counts data
dfCounts$Volume <- dfGCPDByVolume$TotalUse
dfCounts$PercentVolume <- dfCounts$Volume/sum(dfCounts$Volume)
dfCounts$TextFull <- paste("These ",dfCounts$counts, "providers use\n", sprintf("%1.0f%%", dfCounts$PercentVolume*100), "of the statewide total")
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
dfCounts$TextFull <- paste(dfCounts$counts, "\nProviders\n", "(",sprintf("%1.0f%%", dfCounts$PercentVolume*100), "state volume)")
#Nullify the last text entry
dfCounts$TextFull <- dfCounts$TextFull[1:(length(dfCounts$TextFull)-1)]
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
#Build a data frame to plot labels for the groups
dfLabels <- data.frame(Rank = dfCounts$CumSum,
Text = dfCounts$Text,
TextFull = dfCounts$TextFull,
Counts = dfCounts$counts,
FontColor = as.factor(c(1,2,3)))
#Calculate the Mid rank as Cumulative + 1/2 current counts
dfLabels$MidRank <- dfLabels$Rank + dfLabels$Counts/2
dfLabels$YPos <- 1250
dfAllYearsSort$Blank <- ""
#Build a data frame to label the lines
dfLineLabels <- data.frame(Rank = dfLabels$Rank[1:2],
GPCD = cGPCDBreaks[2:3],
#Label = c("Salt Lake City ~ 191 gpcd", "2x Salt Lake City ~ 382 gpcd"))
Label = c(paste(sAvgText, "~ ", nAvgGPCD, "gpcd"), paste("120%", sAvgText, "~", sprintf("%.0f", nGPCDToMeetTarget), "gpcd")))
sBlockLabelColor <- "red"
sBlockSepColor <- "black"
sHighlightColor <- "red"
#Flip the Short Names upside down to plot labels correctly
dfAllYearsSortFlip <- dfAllYearsSort %>% map_df(rev)
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_bar(aes(x= reorder(WRENAME, -TotalGPCD), y=TotalGPCD, fill = TotGPCDBin, color = TotGPCDBin), stat="identity") +
#Plot vertical line to separate blocks
geom_vline(xintercept = dfCounts$CumSum, color=sBlockSepColor, size = 1, linetype = "dashed") +
#Label the number of providers in each block
geom_text(data = dfLabels, aes(x = MidRank, y = YPos, label = Text, color = FontColor), size = 7) +
#Label the line breaks
geom_text(data = dfLineLabels, aes(x = Rank - 5, y = 2000, label = Label), size = 6, angle = 90, color = sBlockSepColor) +
#Plot some points to see where they are
#geom_point(data = data.frame(x = c(0,1000), y = c(0,1000)), aes(x=x,y=y), size= 10) +
#geom_text(data=dfAvgGPCD %>% filter(year==2015), aes(x=AvgGPCD+30,y=25), label = "Utah average", size=6, hjust=0) +
#Define scales
#Flip the x labels upside down
scale_x_discrete(labels = dfAllYearsSortFlip$ShortName) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_fill_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_y_continuous(breaks = seq(0,4500, by=500)) +
#Turn the Fill guide off
guides(fill = "none", color = "none") +
labs(x="Utah water provider (Ranked)", y="Gallons per person per day") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color = sHighlightColor))
#Prepare a data frame to download to excel that shows:
#   1) Highlight city
#   2) Total GPCD
#   3) Potable GPCD
#   4) Percent reducation to get to Salt Lake City value
#Filter and select to get the data we want
dfReductions <- dfAllYearsSort %>%  filter(ShortName != "") %>% select(ShortName, TotalGPCD, TotPotaGPCD) %>% arrange(-TotalGPCD)
# Calculate % reduction
dfReductions$PercentReduce <- (dfReductions$TotalGPCD - nAvgGPCD)/dfReductions$TotalGPCD
dfReductions$TargetCanMeet <- ifelse(dfReductions$PercentReduce > nStateConserveGoal, "No", "Yes")
# State whether sufficient to meet conservation goal of 20%
#Write the sorted dataframe to csv
write.csv(dfReductions, "dfReductions.csv")
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_point(aes(x= TotalGPCD, y=TotPotaGPCD, color = TotGPCDBin), size = 6) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8])) +
guides(color = "none") +
labs(x="Total Use (gallons per person per day)", y="Potable Use (gallons per person per day)") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
#panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank())
#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_point(aes(x= TotalGPCD, y=TotPotaGPCD, color = TotGPCDBin), size = 6) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8]), sHighlightColor) +
guides(color = "none") +
labs(x="Total Use (gallons per person per day)", y="Potable Use (gallons per person per day)") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
#panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank())
#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_point(aes(x= TotalGPCD, y=TotPotaGPCD, color = TotGPCDBin), size = 6) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
guides(color = "none") +
labs(x="Total Use (gallons per person per day)", y="Potable Use (gallons per person per day)") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
#panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank())
#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(dfReductions)
nrow(dfAllYearsSort)
dfAllYearsSort <- dfAllYears %>% filter(year == 2018, TotalGPCD > 75) %>% arrange(TotalGPCD)
dfAllYearsSort$Row <- seq(1,nrow(dfAllYearsSort), by=1)
#Cities to highlight
#These cities have a range of Total GPCD, Total GPCD is often similar to Potable GPCD, and people will recognize these providers
#Read in from Excel
dfHighlightCities <- read_excel("HighlightCities.xlsx","HighlightCities","A1:B23")
# The Salt Lake City gallons per person per day reported
nAvgGPCD <- 191 #240 = state average
sAvgText <- "Salt Lake City"
# Define the state conservation goal and calculate the equivalent GPCD that
# will reach the nAvgGPCD vaue
nStateConserveGoal <- 0.2
#Calculate the GPCD that will meet the SLC target
nGPCDToMeetTarget <-  -nAvgGPCD/(nStateConserveGoal - 1)
print(paste(sprintf("%0.f",nGPCDToMeetTarget), "gpcd can reduce by state conservation goal of", sprintf("%.0f%%", nStateConserveGoal*100), "and achieve SLC use"))
# Break at 0, the average, the GPCD to reduce to meet the average, and max
cGPCDBreaks <-  c(0, nAvgGPCD, nGPCDToMeetTarget, max(dfAllYearsSort$TotalGPCD))
#Count water providers within breaks
dfCounts <- hist(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, plot=FALSE) #, breaks = c(0,100,200,300,400,500, 1000, 5000))
dfCounts$CumSum <- nrow(dfAllYearsSort) - cumsum(dfCounts$counts)
#Assign each water provider to a break
dfAllYearsSort$TotGPCDBin <- cut(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, labels = cGPCDBreaks[1:(length(cGPCDBreaks)-1)])
#Sum in each group
dfGPCDByVolume <- dfAllYearsSort %>% group_by(TotGPCDBin, year) %>% summarize(TotalUse = sum(TotalUse))
#Add an additional group that is the Water providers to highlight
dfAllYearsSort$TotGPCDBin <- ifelse(dfAllYearsSort$WRENAME %in% dfHighlightCities$FullName,"Highlight", dfAllYearsSort$TotGPCDBin)
#Joint the Short cities names
dfAllYearsSort <- left_join(dfAllYearsSort, dfHighlightCities, by = c("WRENAME" = "FullName"))
#Convert NAs to ""
dfAllYearsSort$ShortName <- ifelse(is.na(dfAllYearsSort$ShortName),"",dfAllYearsSort$ShortName)
#Add the volume data to the prior counts data
dfCounts$Volume <- dfGCPDByVolume$TotalUse
dfCounts$PercentVolume <- dfCounts$Volume/sum(dfCounts$Volume)
dfCounts$TextFull <- paste("These ",dfCounts$counts, "providers use\n", sprintf("%1.0f%%", dfCounts$PercentVolume*100), "of the statewide total")
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
dfCounts$TextFull <- paste(dfCounts$counts, "\nProviders\n", "(",sprintf("%1.0f%%", dfCounts$PercentVolume*100), "state volume)")
#Nullify the last text entry
dfCounts$TextFull <- dfCounts$TextFull[1:(length(dfCounts$TextFull)-1)]
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
#Build a data frame to plot labels for the groups
dfLabels <- data.frame(Rank = dfCounts$CumSum,
Text = dfCounts$Text,
TextFull = dfCounts$TextFull,
Counts = dfCounts$counts,
FontColor = as.factor(c(1,2,3)))
#Calculate the Mid rank as Cumulative + 1/2 current counts
dfLabels$MidRank <- dfLabels$Rank + dfLabels$Counts/2
dfLabels$YPos <- 1250
dfAllYearsSort$Blank <- ""
#Build a data frame to label the lines
dfLineLabels <- data.frame(Rank = dfLabels$Rank[1:2],
GPCD = cGPCDBreaks[2:3],
#Label = c("Salt Lake City ~ 191 gpcd", "2x Salt Lake City ~ 382 gpcd"))
Label = c(paste(sAvgText, "~ ", nAvgGPCD, "gpcd"), paste("120%", sAvgText, "~", sprintf("%.0f", nGPCDToMeetTarget), "gpcd")))
sBlockLabelColor <- "red"
sBlockSepColor <- "black"
sHighlightColor <- "red"
#Flip the Short Names upside down to plot labels correctly
dfAllYearsSortFlip <- dfAllYearsSort %>% map_df(rev)
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_bar(aes(x= reorder(WRENAME, -TotalGPCD), y=TotalGPCD, fill = TotGPCDBin, color = TotGPCDBin), stat="identity") +
#Plot vertical line to separate blocks
geom_vline(xintercept = dfCounts$CumSum, color=sBlockSepColor, size = 1, linetype = "dashed") +
#Label the number of providers in each block
geom_text(data = dfLabels, aes(x = MidRank, y = YPos, label = Text, color = FontColor), size = 7) +
#Label the line breaks
geom_text(data = dfLineLabels, aes(x = Rank - 5, y = 2000, label = Label), size = 6, angle = 90, color = sBlockSepColor) +
#Plot some points to see where they are
#geom_point(data = data.frame(x = c(0,1000), y = c(0,1000)), aes(x=x,y=y), size= 10) +
#geom_text(data=dfAvgGPCD %>% filter(year==2015), aes(x=AvgGPCD+30,y=25), label = "Utah average", size=6, hjust=0) +
#Define scales
#Flip the x labels upside down
scale_x_discrete(labels = dfAllYearsSortFlip$ShortName) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_fill_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_y_continuous(breaks = seq(0,4500, by=500)) +
#Turn the Fill guide off
guides(fill = "none", color = "none") +
labs(x="Utah water provider (Ranked)", y="Gallons per person per day") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color = sHighlightColor))
#Prepare a data frame to download to excel that shows:
#   1) Highlight city
#   2) Total GPCD
#   3) Potable GPCD
#
#order the data frame by the TotalGPCD field
dfAllYearsSort <- dfAllYears %>% filter(year == 2018) %>% arrange(TotalGPCD)
dfAllYearsSort$Row <- seq(1,nrow(dfAllYearsSort), by=1)
#Cities to highlight
#These cities have a range of Total GPCD, Total GPCD is often similar to Potable GPCD, and people will recognize these providers
#Read in from Excel
dfHighlightCities <- read_excel("HighlightCities.xlsx","HighlightCities","A1:B23")
# The Salt Lake City gallons per person per day reported
nAvgGPCD <- 191 #240 = state average
sAvgText <- "Salt Lake City"
# Define the state conservation goal and calculate the equivalent GPCD that
# will reach the nAvgGPCD vaue
nStateConserveGoal <- 0.2
#Calculate the GPCD that will meet the SLC target
nGPCDToMeetTarget <-  -nAvgGPCD/(nStateConserveGoal - 1)
print(paste(sprintf("%0.f",nGPCDToMeetTarget), "gpcd can reduce by state conservation goal of", sprintf("%.0f%%", nStateConserveGoal*100), "and achieve SLC use"))
# Break at 0, the average, the GPCD to reduce to meet the average, and max
cGPCDBreaks <-  c(0, nAvgGPCD, nGPCDToMeetTarget, max(dfAllYearsSort$TotalGPCD))
#Count water providers within breaks
dfCounts <- hist(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, plot=FALSE) #, breaks = c(0,100,200,300,400,500, 1000, 5000))
dfCounts$CumSum <- nrow(dfAllYearsSort) - cumsum(dfCounts$counts)
#Assign each water provider to a break
dfAllYearsSort$TotGPCDBin <- cut(dfAllYearsSort$TotalGPCD, breaks = cGPCDBreaks, labels = cGPCDBreaks[1:(length(cGPCDBreaks)-1)])
#Sum in each group
dfGPCDByVolume <- dfAllYearsSort %>% group_by(TotGPCDBin, year) %>% summarize(TotalUse = sum(TotalUse))
#Add an additional group that is the Water providers to highlight
dfAllYearsSort$TotGPCDBin <- ifelse(dfAllYearsSort$WRENAME %in% dfHighlightCities$FullName,"Highlight", dfAllYearsSort$TotGPCDBin)
#Joint the Short cities names
dfAllYearsSort <- left_join(dfAllYearsSort, dfHighlightCities, by = c("WRENAME" = "FullName"))
#Convert NAs to ""
dfAllYearsSort$ShortName <- ifelse(is.na(dfAllYearsSort$ShortName),"",dfAllYearsSort$ShortName)
#Add the volume data to the prior counts data
dfCounts$Volume <- dfGCPDByVolume$TotalUse
dfCounts$PercentVolume <- dfCounts$Volume/sum(dfCounts$Volume)
dfCounts$TextFull <- paste("These ",dfCounts$counts, "providers use\n", sprintf("%1.0f%%", dfCounts$PercentVolume*100), "of the statewide total")
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
dfCounts$TextFull <- paste(dfCounts$counts, "\nProviders\n", "(",sprintf("%1.0f%%", dfCounts$PercentVolume*100), "state volume)")
#Nullify the last text entry
dfCounts$TextFull <- dfCounts$TextFull[1:(length(dfCounts$TextFull)-1)]
dfCounts$Text <- paste(dfCounts$counts, "\nProviders")
#Build a data frame to plot labels for the groups
dfLabels <- data.frame(Rank = dfCounts$CumSum,
Text = dfCounts$Text,
TextFull = dfCounts$TextFull,
Counts = dfCounts$counts,
FontColor = as.factor(c(1,2,3)))
#Calculate the Mid rank as Cumulative + 1/2 current counts
dfLabels$MidRank <- dfLabels$Rank + dfLabels$Counts/2
dfLabels$YPos <- 1250
dfAllYearsSort$Blank <- ""
#Build a data frame to label the lines
dfLineLabels <- data.frame(Rank = dfLabels$Rank[1:2],
GPCD = cGPCDBreaks[2:3],
#Label = c("Salt Lake City ~ 191 gpcd", "2x Salt Lake City ~ 382 gpcd"))
Label = c(paste(sAvgText, "~ ", nAvgGPCD, "gpcd"), paste("120%", sAvgText, "~", sprintf("%.0f", nGPCDToMeetTarget), "gpcd")))
sBlockLabelColor <- "red"
sBlockSepColor <- "black"
sHighlightColor <- "red"
#Flip the Short Names upside down to plot labels correctly
dfAllYearsSortFlip <- dfAllYearsSort %>% map_df(rev)
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_bar(aes(x= reorder(WRENAME, -TotalGPCD), y=TotalGPCD, fill = TotGPCDBin, color = TotGPCDBin), stat="identity") +
#Plot vertical line to separate blocks
geom_vline(xintercept = dfCounts$CumSum, color=sBlockSepColor, size = 1, linetype = "dashed") +
#Label the number of providers in each block
geom_text(data = dfLabels, aes(x = MidRank, y = YPos, label = Text, color = FontColor), size = 7) +
#Label the line breaks
geom_text(data = dfLineLabels, aes(x = Rank - 5, y = 2000, label = Label), size = 6, angle = 90, color = sBlockSepColor) +
#Plot some points to see where they are
#geom_point(data = data.frame(x = c(0,1000), y = c(0,1000)), aes(x=x,y=y), size= 10) +
#geom_text(data=dfAvgGPCD %>% filter(year==2015), aes(x=AvgGPCD+30,y=25), label = "Utah average", size=6, hjust=0) +
#Define scales
#Flip the x labels upside down
scale_x_discrete(limits = c(0,425), labels = dfAllYearsSortFlip$ShortName) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_fill_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_y_continuous(breaks = seq(0,4500, by=500)) +
#Turn the Fill guide off
guides(fill = "none", color = "none") +
labs(x="Utah water provider (Ranked)", y="Gallons per person per day") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color = sHighlightColor))
#Prepare a data frame to download to excel that shows:
#   1) Highlight city
#   2) Total GPCD
#   3) Potable GPCD
#   4) Percent reducation to get to Salt Lake City value
#Filter and select to get the data we want
dfReductions <- dfAllYearsSort %>%  filter(ShortName != "") %>% select(ShortName, TotalGPCD, TotPotaGPCD) %>% arrange(-TotalGPCD)
# Calculate % reduction
dfReductions$PercentReduce <- (dfReductions$TotalGPCD - nAvgGPCD)/dfReductions$TotalGPCD
dfReductions$TargetCanMeet <- ifelse(dfReductions$PercentReduce > nStateConserveGoal, "No", "Yes")
# State whether sufficient to meet conservation goal of 20%
#Write the sorted dataframe to csv
write.csv(dfReductions, "dfReductions.csv")
#Compare TotalGPCD to Potable GPCD
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_point(aes(x= TotalGPCD, y=TotPotaGPCD, color = TotGPCDBin), size = 6) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
guides(color = "none") +
labs(x="Total Use (gallons per person per day)", y="Potable Use (gallons per person per day)") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
#panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank())
#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(dfAllYearsSort ) +
#Bar graph of Total gallons per person per day reversed ranked (largest at left)
geom_bar(aes(x= reorder(WRENAME, -TotalGPCD), y=TotalGPCD, fill = TotGPCDBin, color = TotGPCDBin), stat="identity") +
#Plot vertical line to separate blocks
geom_vline(xintercept = dfCounts$CumSum, color=sBlockSepColor, size = 1, linetype = "dashed") +
#Label the number of providers in each block
geom_text(data = dfLabels, aes(x = MidRank, y = YPos, label = Text, color = FontColor), size = 7) +
#Label the line breaks
geom_text(data = dfLineLabels, aes(x = Rank - 5, y = 2000, label = Label), size = 6, angle = 90, color = sBlockSepColor) +
#Plot some points to see where they are
#geom_point(data = data.frame(x = c(0,1000), y = c(0,1000)), aes(x=x,y=y), size= 10) +
#geom_text(data=dfAvgGPCD %>% filter(year==2015), aes(x=AvgGPCD+30,y=25), label = "Utah average", size=6, hjust=0) +
#Define scales
#Flip the x labels upside down
scale_x_discrete(labels = dfAllYearsSortFlip$ShortName) +
scale_color_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_fill_manual(values = c(palBlues[4], palBlues[6], palBlues[8], sHighlightColor)) +
scale_y_continuous(breaks = seq(0,4500, by=500)) +
#Turn the Fill guide off
guides(fill = "none", color = "none") +
labs(x="Utah water provider (Ranked)", y="Gallons per person per day") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#Remove the minor x grid lines
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.key = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color = sHighlightColor))
